{"version":3,"sources":["Node.jsx","dijkstra.js","PathVisuals.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","isEnd","isStart","row","col","isWall","onMouseDown","onDoubleClick","extraClassName","id","className","onMouseDownCapture","React","Component","dijkstra","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","shortestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","A","B","unvisitedNeighbors","neighbor","previousNode","PathVisuals","startRow","startCol","endRow","endCol","generateNode","startGen","endGen","renderInitialGrid","bind","handleMouseDown","handleNodeChoice","currow","setState","finishNode","shortestPathOrder","currNode","unshift","getShortestPathOrder","animateDijkstra","i","setTimeout","animateShortestPath","document","getElementById","newGrid","slice","newNode","event","target","value","type","checked","onChange","e","onClick","visualizeDijkstra","map","rowIndex","key","nodeIndex","generateStartEnd","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10fcdd1a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./nodeStyle.css\";\r\nexport default class Node extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isEnd,\r\n      isStart,\r\n      row,\r\n      col,\r\n      isWall,\r\n      onMouseDown,\r\n      onDoubleClick\r\n    } = this.props;\r\n    const extraClassName = isEnd\r\n      ? \"node-end\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDownCapture={() => onMouseDown(row, col)}\r\n        onDoubleClick={() => onDoubleClick(row, col)}\r\n      />\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const shortestNode = unvisitedNodes.shift();\r\n    if (shortestNode.isWall) continue;\r\n    if (shortestNode.distance === Infinity) return visitedNodesInOrder;\r\n    shortestNode.isVisited = true;\r\n    visitedNodesInOrder.push(shortestNode);\r\n    if (shortestNode === endNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(shortestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((A, B) => A.distance - B.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) {\r\n    if (!grid[row - 1][col].isVisited)\r\n      unvisitedNeighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (row < grid.length - 1) {\r\n    if (!grid[row + 1][col].isVisited)\r\n      unvisitedNeighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (col > 0) {\r\n    if (!grid[row][col - 1].isVisited)\r\n      unvisitedNeighbors.push(grid[row][col - 1]);\r\n  }\r\n  if (col < grid[0].length - 1) {\r\n    if (!grid[row][col + 1].isVisited)\r\n      unvisitedNeighbors.push(grid[row][col + 1]);\r\n  }\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\nexport function getShortestPathOrder(endNode) {\r\n  const shortestPathOrder = [];\r\n  let currNode = endNode;\r\n  while (currNode !== null) {\r\n    shortestPathOrder.unshift(currNode);\r\n    currNode = currNode.previousNode;\r\n  }\r\n  return shortestPathOrder;\r\n}\r\n","import React from \"react\";\r\nimport Node from \"./Node\";\r\nimport \"./pathStyle.css\";\r\nimport { dijkstra, getShortestPathOrder } from \"./dijkstra\";\r\n\r\nexport default class PathVisuals extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodes: [],\r\n      startRow: null,\r\n      startCol: null,\r\n      endRow: null,\r\n      endCol: null,\r\n      generateNode: \"start\",\r\n      startGen: false,\r\n      endGen: false\r\n    };\r\n    this.renderInitialGrid = this.renderInitialGrid.bind(this);\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleNodeChoice = this.handleNodeChoice.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.renderInitialGrid();\r\n  }\r\n\r\n  renderInitialGrid() {\r\n    const nodes = [];\r\n    for (let row = 0; row < 17; row++) {\r\n      const currow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        const node = {\r\n          row,\r\n          col,\r\n          isStart: row === this.state.startRow && col === this.state.startCol,\r\n          isEnd: row === this.state.endRow && col === this.state.endCol,\r\n          distance: Infinity,\r\n          isVisited: false,\r\n          isWall: false,\r\n          previousNode: null\r\n        };\r\n        currow.push(node);\r\n      }\r\n      nodes.push(currow);\r\n    }\r\n    this.setState({ nodes });\r\n  }\r\n  visualizeDijkstra() {\r\n    const { nodes } = this.state;\r\n    const startNode = nodes[this.state.startRow][this.state.startCol];\r\n    const finishNode = nodes[this.state.endRow][this.state.endCol];\r\n    const visitedNodesInOrder = dijkstra(nodes, startNode, finishNode);\r\n    const shortestPathOrder = getShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, shortestPathOrder);\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, shortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(shortestPathOrder);\r\n        }, 75 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 75 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(shortestPathOrder) {\r\n    for (let i = 0; i < shortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = shortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 30 * i);\r\n    }\r\n  }\r\n  handleMouseDown(row, col) {\r\n    const newGrid = this.state.nodes.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    this.setState({ nodes: newGrid });\r\n  }\r\n  generateStartEnd(row, col) {\r\n    if (this.state.generateNode === \"start\") {\r\n      if (this.state.startGen === false) {\r\n        const newGrid = this.state.nodes.slice();\r\n        const node = newGrid[row][col];\r\n        const newNode = {\r\n          ...node,\r\n          isStart: !node.isStart\r\n        };\r\n        newGrid[row][col] = newNode;\r\n        this.setState({\r\n          nodes: newGrid,\r\n          startGen: true,\r\n          startRow: row,\r\n          startCol: col\r\n        });\r\n      } else {\r\n        if (row === this.state.startRow && this.state.startCol === col) {\r\n          const newGrid = this.state.nodes.slice();\r\n          const node = newGrid[row][col];\r\n          const newNode = {\r\n            ...node,\r\n            isStart: !node.isStart\r\n          };\r\n          newGrid[row][col] = newNode;\r\n          this.setState({\r\n            nodes: newGrid,\r\n            startGen: false,\r\n            startRow: null,\r\n            startCol: null\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      if (this.state.endGen === false) {\r\n        const newGrid = this.state.nodes.slice();\r\n        const node = newGrid[row][col];\r\n        const newNode = {\r\n          ...node,\r\n          isEnd: !node.isEnd\r\n        };\r\n        newGrid[row][col] = newNode;\r\n        this.setState({\r\n          nodes: newGrid,\r\n          endGen: true,\r\n          endRow: row,\r\n          endCol: col\r\n        });\r\n      } else {\r\n        if (row === this.state.endRow && this.state.endCol === col) {\r\n          const newGrid = this.state.nodes.slice();\r\n          const node = newGrid[row][col];\r\n          const newNode = {\r\n            ...node,\r\n            isEnd: !node.isEnd\r\n          };\r\n          newGrid[row][col] = newNode;\r\n          this.setState({\r\n            nodes: newGrid,\r\n            endGen: false,\r\n            endRow: null,\r\n            endCol: null\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  handleNodeChoice(event) {\r\n    this.setState({ generateNode: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { nodes } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"panel\">\r\n          <h1>Dijkstras Visualise</h1>\r\n          <div className=\"chooseNode\">\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                value=\"start\"\r\n                checked={this.state.generateNode === \"start\"}\r\n                onChange={e => this.handleNodeChoice(e)}\r\n              />\r\n              Choose Start\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                value=\"end\"\r\n                checked={this.state.generateNode === \"end\"}\r\n                onChange={e => this.handleNodeChoice(e)}\r\n              />\r\n              Choose End\r\n            </label>\r\n            <h6>Choose Start or End option and double click to create Start or End nodes. Click to create obstacles</h6>\r\n          </div>\r\n          <div>\r\n            {this.state.endGen && this.state.startGen && (\r\n              <button onClick={() => this.visualizeDijkstra()}>\r\n                Visualise\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"nodes\">\r\n          {nodes.map((row, rowIndex) => {\r\n            return (\r\n              <div key={rowIndex}>\r\n                {row.map((node, nodeIndex) => {\r\n                  const { isStart, isEnd, col, row, isWall, isVisited } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIndex}\r\n                      col={col}\r\n                      row={row}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      isVisited={isVisited}\r\n                      isEnd={isEnd}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onDoubleClick={(row, col) =>\r\n                        this.generateStartEnd(row, col)\r\n                      }\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./appStyle.css\";\nimport PathVisuals from \"./PathVisuals\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <PathVisuals />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}